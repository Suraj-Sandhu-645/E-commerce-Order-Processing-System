spring.application.name=product-management
spring.datasource.url=jdbc:postgresql://localhost:5432/e-commerce-order-procession
spring.datasource.username=admin
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
#it can be detect automatically you said using by adding it dependency in pom.xml
#If you're using more than one database in your Spring Boot application,
#you absolutely need to configure each one explicitly ? you cannot rely solely on auto-configuration.

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#Tells Hibernate (the JPA provider) how to generate SQL for the PostgreSQL database.
#
#? Why it's needed:
#Hibernate supports many databases (Oracle, MySQL, SQL Server, etc.).
#
#Each database has different SQL dialects (functions, keywords, syntax).
#
#This setting tells Hibernate to generate PostgreSQL-specific SQL for things like:
#
#Auto-incrementing IDs
#
#LIMIT/OFFSET for pagination
#
#Date/time functions
#
#Schema generation

springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.enabled=true
springdoc.swagger-ui.enabled=true
server.port=8080


#jdbc:postgresql://localhost:5432/product
#|       |         |-----------------------> Where the database lives (host, port, database name)
#|       |----------------------------------> Which database system (PostgreSQL)
#|-------------------------------------------> Java should use JDBC to handle the connection


spring.data.mongodb.uri=mongodb://admin:mongo@localhost:27017/e-commerce-order-procession
